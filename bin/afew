#!/usr/bin/env python
# coding=utf-8

#
# Copyright (c) Justus Winter <4winter@informatik.uni-hamburg.de>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

import sys
import os
import time
import logging
import optparse

from afew.main import main
from afew.Filter import all_filters
from afew.Settings import read_notmuch_config

option_parser = optparse.OptionParser(
    usage = '%prog [options] [--] [query]'
)

# the actions
action_group = optparse.OptionGroup(
    option_parser,
    'Actions',
    'Please specify exactly one action (both update actions can be specified simultaniously).'
)
action_group.add_option(
    '-t', '--tag', default = False, action = 'store_true',
    help = 'run the tag filters'
)
action_group.add_option(
    '-l', '--learn', default = False,
    help = 'train the category with the messages matching the given query'
)
action_group.add_option(
    '-u', '--update', default = False, action = 'store_true',
    help = 'update the categories [requires no query]'
)
action_group.add_option(
    '-U', '--update-reference', default = False, action = 'store_true',
    help = 'update the reference category (takes quite some time) [requires no query]'
)
action_group.add_option(
    '-c', '--classify', default = False, action = 'store_true',
    help = 'classify each message matching the given query (to test the trained categories)'
)
option_parser.add_option_group(action_group)

# query modifiers
query_modifier_group = optparse.OptionGroup(
    option_parser,
    'Query modifiers',
    'Please specify either --all or --new or a query string.'
    ' The default query for the update actions is a random selection of'
    ' REFERENCE_SET_SIZE mails from the last REFERENCE_SET_TIMEFRAME days.'
)
query_modifier_group.add_option(
    '-a', '--all', default = False, action = 'store_true',
    help = 'operate on all messages'
)
query_modifier_group.add_option(
    '-n', '--new', default = False, action = 'store_true',
    help = 'operate on all new messages'
)
option_parser.add_option_group(query_modifier_group)

# general options
options_group = optparse.OptionGroup(
    option_parser,
    'General options',
)
# TODO: get config via notmuch api
options_group.add_option(
    '-C', '--notmuch-config', default = None,
    help = 'path to the notmuch configuration file [default: $NOTMUCH_CONFIG or ~/.notmuch-config]'
)
options_group.add_option(
    '-e', '--enable-filters',
    default = 'SpamFilter,ClassifyingFilter,KillThreadsFilter,ListMailsFilter,ArchiveSentMailsFilter,InboxFilter',
    help = "filter classes to use, separated by ',' [default: all]"
)
options_group.add_option(
    '-d', '--dry-run', default = False, action = 'store_true',
    help = "don't change the db [default: %default]"
)
options_group.add_option(
    '-R', '--reference-set-size', default = 1000,
    help = 'size of the reference set [default: %default]'
)

options_group.add_option(
    '-T', '--reference-set-timeframe', default = 30, metavar = 'DAYS',
    help = 'do not use mails older than DAYS days [default: %default]'
)

options_group.add_option(
    '-v', '--verbose', dest = 'verbosity', action = 'count', default = 0,
    help = 'be more verbose, can be given multiple times'
)
option_parser.add_option_group(options_group)

options, args = option_parser.parse_args()

no_actions = len(filter(None, (
    options.tag,
    options.update or options.update_reference,
    options.learn,
    options.classify,
)))
if no_actions == 0:
    sys.exit('You need to specify an action')
elif no_actions > 1:
    sys.exit('Please specify exactly one action (both update actions can be given at once)')

no_query_modifiers = len(filter(None, (options.all, options.new, args)))
if no_query_modifiers == 0 and not (options.update or options.update_reference):
    sys.exit('You need to specify one of --new, --all or a query string')
elif no_query_modifiers > 1:
    sys.exit('Please specify either --all, --new or a query string')

if options.new:
    query_string = 'tag:new'
elif options.all:
    query_string = ''
elif not (options.update or options.update_reference):
    query_string = ' '.join(args)
elif options.update or options.update_reference:
    query_string = '%i..%i' % (time.time() - options.reference_set_timeframe * 24 * 60 * 60, time.time())
else:
    sys.exit('Weird... please file a bug containing your command line.')

options.enable_filters = options.enable_filters.split(',')

all_filters_set = set(all_filters.keys())
enabled_filters_set = set(options.enable_filters)
if not all_filters_set.issuperset(enabled_filters_set):
    sys.exit('Unknown filter(s) selected: %s' % (' '.join(enabled_filters_set.difference(all_filters_set))))

options.enable_filters = [all_filters[filter_name] for filter_name in options.enable_filters]

loglevel = {
    0: logging.WARNING,
    1: logging.INFO,
    2: logging.DEBUG,
}[min(2, options.verbosity)]
logging.basicConfig(level = loglevel)

read_notmuch_config(options.notmuch_config)

main(options, query_string)
